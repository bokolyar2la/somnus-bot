import { InlineKeyboard } from 'grammy'
import type { MyContext } from '../helpers/state.js'

/**
 * –ü—Ä–æ—Ñ–∏–ª—å —Å—á–∏—Ç–∞–µ–º ¬´–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º¬ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã:
 * 1) —Ç–∞–π–º-–∑–æ–Ω–∞ (IANA), 2) –≤—Ä–µ–º—è –ø–æ–¥—ä—ë–º–∞ (HH:MM), 3) –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (HH:MM).
 * –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç.
 */
export function isProfileComplete(u: {
	timezone?: string | null
	ageBand?: string | null
	chronotype?: string | null
	wakeTime?: string | null
	sleepTime?: string | null
	stressLevel?: number | null
}): boolean {
	const tzOk = !!u.timezone && u.timezone.trim().length > 0
	const wakeOk = !!u.wakeTime && u.wakeTime.trim().length > 0
	const sleepOk = !!u.sleepTime && u.sleepTime.trim().length > 0
	return tzOk && wakeOk && sleepOk
}

/** –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è + CTA –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π */
export async function sendProfileReadyCta(ctx: MyContext) {
	const kb = new InlineKeyboard()
	if (ctx.session.onboarding?.pendingEntryId) {
		// –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–ª–±—ç–∫–∞ ‚Äî interpret:<entryId>
		kb.text(
			'üîÆ –†–∞–∑–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å',
			`interpret:${ctx.session.onboarding!.pendingEntryId}`
		)
	} else {
		kb.text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
	}
	await ctx.reply(
		'‚ú® –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî —Å–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–æ—Ä—ã –±—É–¥—É—Ç —Ç–æ—á–Ω–µ–µ.',
		{ reply_markup: kb }
	)
}

/** –í–∞–ª–∏–¥–∞—Ü–∏—è IANA —Ç–∞–π–º-–∑–æ–Ω—ã */
export function isValidTimeZone(tz: string): boolean {
	try {
		new Intl.DateTimeFormat('en-US', { timeZone: tz }).format(new Date())
		return true
	} catch {
		return false
	}
}

/** –ü–æ–¥—Å—á—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞ (–ø–æ–¥—Ä—è–¥ –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏) */
export function calculateDreamStreak(dreams: Array<any>): number {
	if (!dreams.length) return 0
	const sorted = [...dreams].sort(
		(a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
	)

	let maxStreak = 0
	let current = 0
	let last: Date | null = null

	for (const d of sorted) {
		const day = new Date(d.createdAt)
		day.setHours(0, 0, 0, 0)

		if (!last) {
			current = 1
		} else {
			const diff = Math.round(
				(day.getTime() - last.getTime()) / (1000 * 60 * 60 * 24)
			)
			if (diff === 1) current += 1
			else if (diff > 1) current = 1
		}
		maxStreak = Math.max(maxStreak, current)
		last = day
	}
	return maxStreak
}
