import { Bot, InlineKeyboard } from 'grammy'
import { createDreamEntry, getOrCreateUser } from '../../db/repo.js'
import { MyContext } from '../helpers/state.js'

export async function openSleepInput(ctx: MyContext) {
	if (!ctx.from?.id) {
		return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')
	}
	// –æ—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ctx.session.conversation = { stage: 'awaitingText', type: 'sleep' }
	await ctx.reply('‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à —Å–æ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞')
}

export async function handleSleepCommand(ctx: MyContext) {
	await openSleepInput(ctx)
}

export async function handleNapCommand(ctx: MyContext) {
	if (!ctx.from?.id) {
		return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')
	}
	ctx.session.conversation = { stage: 'awaitingText', type: 'nap' }
	await ctx.reply(
		'‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π —Å–æ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞'
	)
}

export function registerSleepFlow(bot: Bot<MyContext>) {
	bot.command('sleep', handleSleepCommand)
	bot.command('nap', handleNapCommand)
}

export async function handleSleepMessage(ctx: MyContext): Promise<boolean> {
	const conversation = ctx.session.conversation
	const userId = ctx.from?.id.toString()

	if (
		!userId ||
		!conversation ||
		(conversation.type !== 'sleep' && conversation.type !== 'nap')
	) {
		return false // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É flow
	}

	if (conversation.stage === 'awaitingText') {
		const text = ctx.message?.text?.trim()
		if (!text || text.length < 5) {
			await ctx.reply(
				'–ü–æ—Ö–æ–∂–µ, —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).'
			)
			return true
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å —Å–Ω–∞
		const user = await getOrCreateUser(userId)
		const entry = await createDreamEntry(user.id, {
			sleptAt: new Date(),
			text,
			symbolsRaw: undefined, // LLM —Å–∞–º –∏–∑–≤–ª–µ—á—ë—Ç
		})

		// –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –¥–∞—ë–º ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å¬ª ‚Äî –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—å–± –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
		const kb = new InlineKeyboard().text(
			'üîÆ –†–∞–∑–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å',
			`interpret:${entry.id}`
		)

		await ctx.reply(
			'‚úÖ –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –Ø —Å–∞–º –æ—Ç–º–µ—á—É —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∏ —É—á—Ç—É –∏—Ö –≤ –æ—Ç—á—ë—Ç–µ.',
			{
				reply_markup: kb,
			}
		)

		// –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
		delete ctx.session.conversation
		return true
	}

	return false
}
