import { Bot } from 'grammy'
import { getOrCreateUser, updateUser } from '../../db/repo.js'
import { nowInZone } from '../../util/dates.js'
import { isValidHHMM, mapRuWeekdayToIndex } from '../helpers/parse.js'
import type { MyContext } from '../helpers/state.js'
import { mainKb, remindersKb, weeklyKb } from '../keyboards.js'

const weekDays = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±']

export async function openRemindersMenu(ctx: MyContext) {
	const userId = ctx.from?.id.toString()
	if (!userId) {
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')
		return
	}
	const user = await getOrCreateUser(userId)
	ctx.session.conversation = { stage: 'remindersMenu', type: 'reminders' }

	const timezone = user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
	const remindMorning = user.remindMorning || '–û—Ç–∫–ª—é—á–µ–Ω–æ'
	const remindEvening = user.remindEvening || '–û—Ç–∫–ª—é—á–µ–Ω–æ'
	const remindersStatus = user.remindersEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
	const reportStatus = user.weeklyEnabled
		? `–≤–∫–ª—é—á—ë–Ω, ${weekDays[user.weeklyDay ?? 0]} ${
				user.weeklyHour ?? 10
		  }:00 (–ª–æ–∫–∞–ª—å–Ω–æ)`
		: '–æ—Ç–∫–ª—é—á—ë–Ω'

	await ctx.reply(
		[
			'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>',
			`–¢–∞–π–º–∑–æ–Ω–∞: ${timezone}`,
			`–£—Ç—Ä–æ: ${remindMorning}`,
			`–í–µ—á–µ—Ä: ${remindEvening}`,
			`–°—Ç–∞—Ç—É—Å: ${remindersStatus}`,
			'',
			`üóì <b>–û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º</b>: ${reportStatus}`,
		].join('\n'),
		{ parse_mode: 'HTML', reply_markup: remindersKb }
	)
}

export async function handleRemindersCommand(ctx: MyContext) {
	await openRemindersMenu(ctx);
}

export function registerRemindersFlow(bot: Bot<MyContext>) {
	bot.command('reminders', handleRemindersCommand)

	bot.callbackQuery('reminders:menu', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await openRemindersMenu(ctx)
	})

	bot.hears('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ', async ctx => {
		ctx.session.conversation = {
			stage: 'awaitingMorningTime',
			type: 'reminders',
			prop: 'remindMorning',
		}
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30')
	})

	bot.hears('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ', async ctx => {
		ctx.session.conversation = {
			stage: 'awaitingEveningTime',
			type: 'reminders',
			prop: 'remindEvening',
		}
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä 22:45')
	})

	bot.hears('–í—ã–±—Ä–∞—Ç—å —Ç–∞–π–º–∑–æ–Ω—É', async ctx => {
		ctx.session.conversation = {
			stage: 'awaitingTimezone',
			type: 'reminders',
			prop: 'timezone',
		}
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ç–∞–π–º–∑–æ–Ω—É (IANA), –Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow')
	})

	bot.hears('–í–∫–ª/–í—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', async ctx => {
		const userId = ctx.from?.id.toString()
		if (!userId) return
		const user = await getOrCreateUser(userId)
		await updateUser(userId, { remindersEnabled: !user.remindersEnabled })
		await ctx.reply(
			`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${!user.remindersEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.`,
			{ reply_markup: remindersKb }
		)
		await handleRemindersCommand(ctx)
	})

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–û—Ç—á—ë—Ç–∞ –ø–æ —Å–Ω–∞–º¬ª
	bot.hears('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º', async ctx => {
		await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–Ω–∞–º:', { reply_markup: weeklyKb })
	})

	bot.hears('–í–∫–ª/–í—ã–∫–ª –æ—Ç—á—ë—Ç', async ctx => {
		const userId = ctx.from?.id.toString()
		if (!userId) return
		const user = await getOrCreateUser(userId)
		await updateUser(userId, { weeklyEnabled: !user.weeklyEnabled })
		await ctx.reply(
			`–û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º ${!user.weeklyEnabled ? '–≤–∫–ª—é—á—ë–Ω' : '–æ—Ç–∫–ª—é—á—ë–Ω'}.`,
			{ reply_markup: weeklyKb }
		)
		await handleRemindersCommand(ctx)
	})

	bot.hears('–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', async ctx => {
		ctx.session.conversation = {
			stage: 'awaitingWeeklyDay',
			type: 'reminders',
			prop: 'weeklyDay',
		}
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤—Å, –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±)')
	})

	bot.hears('–í—ã–±—Ä–∞—Ç—å —á–∞—Å', async ctx => {
		ctx.session.conversation = {
			stage: 'awaitingWeeklyHour',
			type: 'reminders',
			prop: 'weeklyHour',
		}
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å (0‚Äì23), –Ω–∞–ø—Ä–∏–º–µ—Ä 10')
	})

	// –ù–∞–≤–∏–≥–∞—Ü–∏—è
	bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async ctx => {
		delete ctx.session.conversation
		await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainKb })
	})

	bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', async ctx => {
		ctx.session.conversation = { stage: 'remindersMenu', type: 'reminders' }
		await handleRemindersCommand(ctx)
	})
}

export async function handleRemindersMessage(ctx: MyContext): Promise<boolean> {
	const conversation = ctx.session.conversation
	const userId = ctx.from?.id.toString()

	if (!userId || !conversation || conversation.type !== 'reminders') {
		return false // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É flow
	}

	const text = ctx.message?.text?.trim()
	if (!text) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
		return true
	}

	if (
		conversation.stage === 'awaitingMorningTime' ||
		conversation.stage === 'awaitingEveningTime'
	) {
		if (!isValidHHMM(text)) {
			await ctx.reply(
				'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ HH:MM (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30'
			)
			return true
		}
		await updateUser(userId, { [conversation.prop!]: text })
		delete ctx.session.conversation
		await ctx.reply(
			`–ì–æ—Ç–æ–≤–æ! ${
				conversation.stage === 'awaitingMorningTime' ? '–£—Ç—Ä–µ–Ω–Ω–µ–µ' : '–í–µ—á–µ—Ä–Ω–µ–µ'
			} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${text} (–ª–æ–∫–∞–ª—å–Ω–æ).`,
			{ reply_markup: remindersKb }
		)
		return true
	}

	if (conversation.stage === 'awaitingTimezone') {
		try {
			nowInZone(text) // –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–π–º–∑–æ–Ω—ã
			await updateUser(userId, { timezone: text })
			delete ctx.session.conversation
			await ctx.reply(`–ì–æ—Ç–æ–≤–æ! –¢–∞–π–º–∑–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${text}.`, {
				reply_markup: remindersKb,
			})
			return true
		} catch {
			await ctx.reply(
				'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º–∑–æ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ IANA —Ç–∞–π–º–∑–æ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow.'
			)
			return true
		}
	}

	if (conversation.stage === 'awaitingWeeklyDay') {
		const dayIndex = mapRuWeekdayToIndex(text)
		if (dayIndex === -1) {
			await ctx.reply(
				'–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑: –≤—Å, –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±.'
			)
			return true
		}
		await updateUser(userId, { weeklyDay: dayIndex })
		delete ctx.session.conversation
		await ctx.reply(`–ì–æ—Ç–æ–≤–æ! –û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ ${text}.`, {
			reply_markup: weeklyKb,
		})
		return true
	}

	if (conversation.stage === 'awaitingWeeklyHour') {
		const hour = Number(text)
		if (Number.isNaN(hour) || hour < 0 || hour > 23) {
			await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23.')
			return true
		}
		await updateUser(userId, { weeklyHour: hour })
		delete ctx.session.conversation
		await ctx.reply(`–ì–æ—Ç–æ–≤–æ! –û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ ${hour}:00.`, {
			reply_markup: weeklyKb,
		})
		return true
	}

	return false // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
}
