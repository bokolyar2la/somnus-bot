import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import { getDreamsForExport, getOrCreateUser } from '../../db/repo.js'
import { calculateDreamStreak } from '../helpers/profile.js'
import type { MyContext } from '../helpers/state.js'

const PAGE_SIZE = 5

/** –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é –≤–∫–ª–∞–¥–æ–∫ */
function tabsKb() {
	return new InlineKeyboard()
		.text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
		.text('üìà –°–∏–º–≤–æ–ª—ã', 'analytics:tab:symbols')
		.text('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'analytics:tab:achievements')
}

function isPaidPlan(plan: string | null | undefined): boolean {
	return plan === 'lite' || plan === 'pro' || plan === 'premium'
}

/** –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML-—ç—Å–∫–µ–π–ø */
function esc(s: string) {
	return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
}

/** –í—ã—Ç–∞—â–∏—Ç—å –æ–±—ä–µ–∫—Ç LLM (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è) */
function readLlm(d: any): any {
	// –≤ –ø—Ä–æ–µ–∫—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –ø–æ–ª—è llmJson –∏ llmJsonText
	if (d.llmJson && typeof d.llmJson === 'object') return d.llmJson
	if (typeof d.llmJsonText === 'string') {
		try {
			return JSON.parse(d.llmJsonText)
		} catch {
			/* ignore */
		}
	}
	return d.llmJsonText && typeof d.llmJsonText === 'object' ? d.llmJsonText : {}
}

/** --------- –í–∫–ª–∞–¥–∫–∞: –î–Ω–µ–≤–Ω–∏–∫ --------- */
async function renderJournalTab(ctx: MyContext, page = 0) {
	const userId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userId)

	// –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, getDreamsForExport –≤–µ—Ä–Ω—ë—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º; –Ω–∞–º —É–¥–æ–±–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
	const dreams = await getDreamsForExport(user.id)
	const totalPages = Math.max(1, Math.ceil(dreams.length / PAGE_SIZE))
	const start = page * PAGE_SIZE
	const slice = dreams.slice(start, start + PAGE_SIZE)

	let html = '<b>üìî –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤</b>\n\n'
	if (!slice.length) {
		html += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.'
	} else {
		html += '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n'
	}

	const kb = new InlineKeyboard()

	for (const d of slice) {
		const llm = readLlm(d)
		const title = llm.short_title ? String(llm.short_title) : `–ó–∞–ø–∏—Å—å ${d.id}`
		const date = new Date(d.createdAt).toLocaleDateString('ru-RU', {
			timeZone: user.timezone ?? 'UTC',
		})
		// –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
		kb.row().text(`${date} ‚Äî ${title}`.slice(0, 64), `analytics:entry:${d.id}`)
	}

	// –ø–∞–≥–∏–Ω–∞—Ü–∏—è
	kb.row()
	if (page > 0) kb.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `analytics:journal:${page - 1}`)
	kb.text(
		`–°—Ç—Ä ${Math.min(page + 1, totalPages)} –∏–∑ ${totalPages}`,
		'analytics:tab:journal'
	)
	if (page < totalPages - 1)
		kb.text('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `analytics:journal:${page + 1}`)

	// –≤–∫–ª–∞–¥–∫–∏ —Å–≤–µ—Ä—Ö—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ —à–ª—ë–º ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å—Ç—Ä–æ–∫—É
	kb.row()
		.text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
		.text('üìà –°–∏–º–≤–æ–ª—ã', 'analytics:tab:symbols')
		.text('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'analytics:tab:achievements')

	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: kb })
}

async function onJournalOpen(ctx: MyContext) {
	ctx.session.analyticsJournalPage = 0
	await renderJournalTab(ctx, 0)
}

async function onJournalPage(ctx: MyContext) {
	const page = parseInt(ctx.match![1], 10)
	ctx.session.analyticsJournalPage = page
	await renderJournalTab(ctx, page)
}

async function onJournalEntry(ctx: MyContext) {
	const entryId = ctx.match![1]
	const userId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userId)
	const all = await getDreamsForExport(user.id)
	const d = all.find(x => x.id === entryId)

	if (!d) {
		await ctx.reply('–°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')
		return
	}

	const llm = readLlm(d)
	const title = llm.short_title ? String(llm.short_title) : `–ó–∞–ø–∏—Å—å ${d.id}`

	const html =
		`<b>${esc(title)}</b>\n\n` +
		`<b>–¢–µ–∫—Å—Ç —Å–Ω–∞:</b> ${esc(String(d.text ?? ''))}\n\n` +
		(Array.isArray(llm.symbols_detected) && llm.symbols_detected.length
			? `<b>–°–∏–º–≤–æ–ª—ã:</b> ${esc(llm.symbols_detected.join(', '))}\n\n`
			: '') +
		(llm.barnum_insight
			? `<b>–ò–Ω—Å–∞–π—Ç:</b> ${esc(String(llm.barnum_insight))}\n\n`
			: '') +
		(llm.esoteric_interpretation
			? `<b>–¢—Ä–∞–∫—Ç–æ–≤–∫–∞:</b> ${esc(String(llm.esoteric_interpretation))}\n\n`
			: '') +
		(llm.reflective_question
			? `<b>–í–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:</b> ${esc(
					String(llm.reflective_question)
			  )}\n\n`
			: '') +
		(Array.isArray(llm.gentle_advice) && llm.gentle_advice.length
			? `<b>–ú—è–≥–∫–∏–µ —à–∞–≥–∏:</b>\n` +
			  llm.gentle_advice
					.map((s: string, i: number) => `${i + 1}. ${esc(s)}`)
					.join('\n')
			: '')

	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: tabsKb() })
}

/** --------- –í–∫–ª–∞–¥–∫–∞: –°–∏–º–≤–æ–ª—ã –∏ —ç–º–æ—Ü–∏–∏ --------- */
async function renderSymbolsTab(ctx: MyContext) {
	const userId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userId)
	const dreams = await getDreamsForExport(user.id)

	const now = new Date()
	const days = isPaidPlan(user.plan) ? 30 : 7
	const from = new Date(now.getTime() - days * 24 * 60 * 60 * 1000)

	const recent = dreams.filter(d => new Date(d.createdAt) >= from)

	const symbolCounts: Record<string, number> = {}
	for (const d of recent) {
		const llm = readLlm(d)
		const symbols: string[] = Array.isArray(llm.symbols_detected)
			? llm.symbols_detected
			: d.symbolsRaw
			? String(d.symbolsRaw)
					.split(',')
					.map((s: string) => s.trim())
					.filter(Boolean)
			: []
		for (const s of symbols) {
			symbolCounts[s] = (symbolCounts[s] || 0) + 1
		}
	}

	const topN = isPaidPlan(user.plan) ? 10 : 3
	const top = Object.entries(symbolCounts)
		.sort((a, b) => b[1] - a[1])
		.slice(0, topN)

	const interpreted = recent.filter(d => {
		const llm = readLlm(d)
		return (
			llm &&
			(llm.short_title || llm.esoteric_interpretation || llm.barnum_insight)
		)
	})

	const streak = calculateDreamStreak(recent)

	let html =
		`<b>üìà –û–±–∑–æ—Ä –∑–∞ ${days} –¥–Ω–µ–π${
			isPaidPlan(user.plan) ? '' : ' (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)'
		}</b>\n\n` +
		`‚Ä¢ –°–Ω–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: ${recent.length}\n` +
		`‚Ä¢ –†–∞–∑–±–æ—Ä–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: ${interpreted.length}\n` +
		`‚Ä¢ –°—Ç—Ä–∏–∫ (–º–∞–∫—Å): ${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n`

	if (top.length) {
		html +=
			`–¢–û–ü-${top.length} —Å–∏–º–≤–æ–ª–æ–≤:\n` +
			top.map(([s, n], i) => `${i + 1}) ${esc(s)} ‚Äî ${n}`).join('\n')
	} else {
		html += `–°–∏–º–≤–æ–ª—ã –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.`
	}

	const kb = new InlineKeyboard()
		.text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
		.text('üìà –°–∏–º–≤–æ–ª—ã', 'analytics:tab:symbols')
		.text('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'analytics:tab:achievements')

	if (!isPaidPlan(user.plan)) {
		kb.row().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
		html += `\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä, –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫—É? –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.`
	}

	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: kb })
}

async function onSymbolsOpen(ctx: MyContext) {
	await renderSymbolsTab(ctx)
}

/** --------- –í–∫–ª–∞–¥–∫–∞: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è --------- */
async function renderAchievementsTab(ctx: MyContext) {
	const userId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userId)
	const dreams = await getDreamsForExport(user.id)

	const firstDreamAchieved = dreams.length >= 1
	const streak = calculateDreamStreak(dreams)
	const sevenDayStreakAchieved = streak >= 7
	const tenInterpretationsAchieved = (user.monthlyCount ?? 0) >= 10 // –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
	const threeFollowupsAchieved = (ctx.session.followupsUsed ?? 0) >= 3 // –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
	const premiumResearcherAchieved = isPaidPlan(user.plan)

	const html =
		`<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n` +
		`üìù <b>–ü–µ—Ä–≤—ã–π —Å–æ–Ω:</b> ${
			firstDreamAchieved ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ'
		} (–∑–∞–ø–∏—Å–∞–Ω ‚â•1 —Å–æ–Ω)\n` +
		`üìÖ <b>7 –ø–æ–¥—Ä—è–¥:</b> ${
			sevenDayStreakAchieved ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ'
		} (—Å—Ç—Ä–∏–∫ ‚â•7 –¥–Ω–µ–π)\n` +
		`üåô <b>10 —Ä–∞–∑–±–æ—Ä–æ–≤:</b> ${
			tenInterpretationsAchieved ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ'
		} (‚â•10 —Ä–∞–∑–±–æ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü)\n` +
		`üí≠ <b>–ú—ã—Å–ª–∏—Ç–µ–ª—å:</b> ${
			threeFollowupsAchieved ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ'
		} (‚â•3 —É—Ç–æ—á–Ω–µ–Ω–∏—è)\n` +
		`üîí <b>–ü—Ä–µ–º–∏—É–º‚Äë–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å:</b> ${
			premiumResearcherAchieved ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ'
		} (–æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É)\n`

	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: tabsKb() })
}

async function onAchievementsOpen(ctx: MyContext) {
	await renderAchievementsTab(ctx)
}

export async function handleAnalyticsCommand(ctx: MyContext) {
	await onJournalOpen(ctx) // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
}

export function registerAnalyticsFlow(bot: Bot<MyContext>): void {
	bot.callbackQuery('analytics:tab:journal', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await onJournalOpen(ctx)
	})

	bot.callbackQuery(/^analytics:journal:(\d+)$/, async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await onJournalPage(ctx)
	})

	bot.callbackQuery(/^analytics:entry:(.+)$/, async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await onJournalEntry(ctx)
	})

	bot.callbackQuery('analytics:tab:symbols', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await onSymbolsOpen(ctx)
	})

	bot.callbackQuery('analytics:tab:achievements', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await onAchievementsOpen(ctx)
	})
}

