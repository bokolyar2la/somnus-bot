// src/bot/flows/reportFlow.ts
import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import { generateReportSummary } from '../../core/llm.js'
import { isPaidPlan } from '../../core/pricing.js'
import {
	addKeywordToLatestEntry,
	getDreamsForExport,
	getLastDream,
	getOrCreateUser,
	getFirstDreamDate,
	updateUser,
} from '../../db/repo.js'
import type { MyContext } from '../helpers/state.js'
import { calculateDreamStreak } from '../helpers/profile.js'

const PAGE_SIZE = 5 as const

/** –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML */
function esc(s: string): string {
	return String(s)
		.replace(/&/g, '&amp;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
}

/** –ß–∏—Ç–∞–µ–º LLM JSON –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π */
function readLlm(d: any): any {
	if (d?.llmJson && typeof d.llmJson === 'object') return d.llmJson
	if (typeof d?.llmJsonText === 'string') {
		try {
			return JSON.parse(d.llmJsonText)
		} catch {}
	}
	return {}
}

/** –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ keywords –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ */
function parseKeywordsToSet(keywords: string | null | undefined): Set<string> {
	const set = new Set<string>()
	if (!keywords) return set
	for (const raw of keywords.split(',')) {
		const v = raw.trim()
		if (v) set.add(v)
	}
	return set
}

/** YYYY-MM-DD –≤ tz */
function ymdInTz(date: Date, tz: string): string {
	return new Intl.DateTimeFormat('en-CA', {
		timeZone: tz,
		year: 'numeric',
		month: '2-digit',
		day: '2-digit',
	}).format(date)
}

/** YYYY-MM –≤ tz */
function ymInTz(date: Date, tz: string): string {
	return ymdInTz(date, tz).slice(0, 7)
}

/** –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º */
function isAdmin(userId: string): boolean {
	// Add admin user IDs here
	const adminIds = ['123456789'] // Replace with actual admin IDs
	return adminIds.includes(userId)
}

/** –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM) */
function formatDateRange(startDate: Date, endDate: Date, tz: string): string {
	const formatter = new Intl.DateTimeFormat('ru-RU', {
		timeZone: tz,
		day: '2-digit',
		month: '2-digit'
	})
	const start = formatter.format(startDate)
	const end = formatter.format(endDate)
	return `${start}‚Äì${end}`
}

/** –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ */
function getDaysUntilNextReport(lastReportAt: Date, tz: string): number {
	const now = new Date()
	const nowLocal = new Date(now.toLocaleString('en-US', { timeZone: tz || 'UTC' }))
	const lastReportLocal = new Date(lastReportAt.toLocaleString('en-US', { timeZone: tz || 'UTC' }))
	
	const daysSinceLastReport = Math.floor((nowLocal.getTime() - lastReportLocal.getTime()) / (1000 * 60 * 60 * 24))
	return Math.max(0, 7 - daysSinceLastReport)
}

/** –ì—Ä–∞–Ω–∏—Ü—ã 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º TZ + —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω */
function getLocal7dBounds(tz: string) {
	const now = new Date()
	const nowLocal = new Date(
		now.toLocaleString('en-US', { timeZone: tz || 'UTC' })
	)

	const startLocal = new Date(nowLocal)
	startLocal.setHours(0, 0, 0, 0)
	startLocal.setDate(startLocal.getDate() - 6) // —Å–µ–≥–æ–¥–Ω—è –∏ 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

	const endLocal = new Date(nowLocal)
	endLocal.setHours(23, 59, 59, 999)

	// –û–±—Ä–∞—Ç–Ω–æ –≤ UTC ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ–ª—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤ UTC
	const startUtc = new Date(
		startLocal.toLocaleString('en-US', { timeZone: 'UTC' })
	)
	const endUtc = new Date(endLocal.toLocaleString('en-US', { timeZone: 'UTC' }))

	const humanRange = {
		from: startLocal.toLocaleDateString('ru-RU'),
		to: endLocal.toLocaleDateString('ru-RU'),
	}

	return { startUtc, endUtc, humanRange, startLocal, endLocal }
}

/** –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ */
type ReportAvailabilityState = {
	state: 'S0' | 'S1' | 'S2' | 'S3' | 'S4'
	message: string
	canGenerate: boolean
	daysProgress?: number
	totalDays?: number
	nextAvailableDate?: string
}

/** –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ */
async function checkReportAvailability(userId: string, userTgId: string): Promise<ReportAvailabilityState> {
	const user = await getOrCreateUser(userTgId)
	const tz = user.timezone || 'UTC'
	const isPaid = isPaidPlan(user.plan)
	const isUserAdmin = isAdmin(userTgId)
	
	// –ê–¥–º–∏–Ω-–±–∞–π–ø–∞—Å
	if (isUserAdmin) {
		const { humanRange } = getLocal7dBounds(tz)
		return {
			state: 'S2',
			message: `–ì–æ—Ç–æ–≤ —Å–æ–±—Ä–∞—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (${humanRange.from}‚Äì${humanRange.to}).`,
			canGenerate: true
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–Ω–æ–≤
	const firstDreamDate = await getFirstDreamDate(userId)
	if (!firstDreamDate) {
		return {
			state: 'S0',
			message: '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç üìù',
			canGenerate: false
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 7 –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞
	const now = new Date()
	const nowLocal = new Date(now.toLocaleString('en-US', { timeZone: tz }))
	const firstDreamLocal = new Date(firstDreamDate.toLocaleString('en-US', { timeZone: tz }))
	const daysSinceFirst = Math.floor((nowLocal.getTime() - firstDreamLocal.getTime()) / (1000 * 60 * 60 * 24))
	
	if (daysSinceFirst < 7) {
		return {
			state: 'S1',
			message: `–ü—Ä–æ—à–ª–æ ${daysSinceFirst}/7 –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞. ${daysSinceFirst === 6 ? '–ó–∞–≤—Ç—Ä–∞' : `–ß–µ—Ä–µ–∑ ${7 - daysSinceFirst} –¥–Ω–µ–π`} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç ‚ú®`,
			canGenerate: false,
			daysProgress: daysSinceFirst,
			totalDays: 7
		}
	}
	
	const currentMonth = ymInTz(now, tz)
	const { humanRange } = getLocal7dBounds(tz)
	
	if (isPaid) {
		// –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º 7-–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç
		if ((user as any).lastReportAt) {
			const daysUntilNext = getDaysUntilNextReport((user as any).lastReportAt, tz)
			if (daysUntilNext > 0) {
				return {
					state: 'S4',
					message: `–û—Ç—á—ë—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ. –ù–æ–≤—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${daysUntilNext} ${daysUntilNext === 1 ? '–¥–µ–Ω—å' : daysUntilNext < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}.`,
					canGenerate: false
				}
			}
		}
		return {
			state: 'S2',
			message: `–ì–æ—Ç–æ–≤ —Å–æ–±—Ä–∞—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (${humanRange.from}‚Äì${humanRange.to}).`,
			canGenerate: true
		}
	} else {
		// –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç
		if ((user as any).lastReportMonth === currentMonth) {
			const nextMonth = new Date(now)
			nextMonth.setMonth(nextMonth.getMonth() + 1, 1)
			nextMonth.setHours(0, 0, 0, 0)
			const nextMonthStr = nextMonth.toLocaleDateString('ru-RU', {
				timeZone: tz,
				day: '2-digit',
				month: '2-digit'
			})
			return {
				state: 'S3',
				message: `–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü üôÇ\n–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á—ë—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å ${nextMonthStr}.`,
				canGenerate: false,
				nextAvailableDate: nextMonthStr
			}
		}
		return {
			state: 'S2',
			message: `–ì–æ—Ç–æ–≤ —Å–æ–±—Ä–∞—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (${humanRange.from}‚Äì${humanRange.to}).`,
			canGenerate: true
		}
	}
}

/** –≠–∫—Ä–∞–Ω-–∑–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ */
async function renderReportPlaceholder(ctx: MyContext) {
	const userId = ctx.from!.id.toString()
	const userTgId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userTgId)
	const tz = user.timezone || 'UTC'
	const isTimezoneEmpty = !user.timezone
	
	const availability = await checkReportAvailability(user.id, userTgId)
	const { humanRange } = getLocal7dBounds(tz)
	
	let html = `<b>üìã –û—Ç—á—ë—Ç –∑–∞ 7 –¥–Ω–µ–π</b>\n\n`
	html += `–î–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${humanRange.from}‚Äì${humanRange.to}\n\n`
	
	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–∞–π–º–∑–æ–Ω–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
	if (isTimezoneEmpty) {
		html += `‚è∞ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç\n\n`
	}
	
	html += availability.message
	
	const kb = new InlineKeyboard()
	
	// –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
	if (availability.canGenerate) {
		kb.text('üßæ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –∑–∞ 7 –¥–Ω–µ–π', 'report:generate:7')
	}
	
	// –í—Ç–æ—Ä–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch (availability.state) {
		case 'S0':
			kb.row().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			break
			
		case 'S1':
			kb.row().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			kb.row().text('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'profile:reminders')
			break
			
		case 'S2':
			kb.row().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			break
			
		case 'S3':
			kb.row().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			kb.row().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
			break
			
		case 'S4':
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			kb.row().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
			break
	}
	
	// –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–π–º–∑–æ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
	if (isTimezoneEmpty) {
		kb.row().text('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É', 'profile:timezone:menu')
	}
	
	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: kb })
}

/** --------- 7-–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç --------- */
async function renderSevenDayReport(ctx: MyContext) {
	const userId = ctx.from!.id.toString()
	const userTgId = ctx.from!.id.toString()
	const user = await getOrCreateUser(userTgId)
	
	// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
	const availability = await checkReportAvailability(user.id, userTgId)
	if (!availability.canGenerate) {
		await renderReportPlaceholder(ctx)
		return
	}
	
	// Use UTC as default if timezone is not set
	const tz = user.timezone || 'UTC'
	const isTimezoneEmpty = !user.timezone
	const { startUtc, endUtc, humanRange } = getLocal7dBounds(tz)

	// –ë–µ—Ä—ë–º –≤—Å–µ —Å–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ –∫–æ–¥–µ (–µ—Å–ª–∏ repo –Ω–µ —É–º–µ–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
	const allDreams = await getDreamsForExport(user.id)
	const dreamsInPeriod = allDreams.filter(d => {
		const base = d.sleptAt ? new Date(d.sleptAt) : new Date(d.createdAt)
		return base >= startUtc && base <= endUtc
	})
	const hasAnyDreams = allDreams.length > 0

	// –ì–µ–π—Ç–∏–Ω–≥ (free: 1/–º–µ—Å—è—Ü)
	if (!isPaidPlan(user.plan)) {
		const monthKey = `weekly_issued:${ymInTz(new Date(), tz)}`
		const latest = await getLastDream(user.id)
		if (latest) {
			const kwSet = parseKeywordsToSet(latest.keywords)
			if (kwSet.has(monthKey)) {
				const kb = new InlineKeyboard().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
				await ctx.reply(
					'–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç—á—ë—Ç –∑–∞ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü üôÇ\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.',
					{ reply_markup: kb }
				)
				return
			}
		}
	}

	// –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ–∫–Ω–µ 7 –¥–Ω–µ–π
	if (dreamsInPeriod.length === 0) {
		const kb = new InlineKeyboard().text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
		if (hasAnyDreams) {
			kb.row().text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
			await ctx.reply(
				`–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (${humanRange.from}‚Äì${humanRange.to}) –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–π —Ç–∞–π–º–∑–æ–Ω–µ ${tz}.\n–†–∞–Ω–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ‚Äî –≤ ¬´üìî –î–Ω–µ–≤–Ω–∏–∫¬ª.`,
				{ reply_markup: kb }
			)
		} else {
			await ctx.reply(
				`–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (${humanRange.from}‚Äì${humanRange.to}) –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n–ó–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–æ–Ω ‚Äî –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∑–∞ –æ—Ç—á—ë—Ç–æ–º ‚ú®`,
				{ reply_markup: kb }
			)
		}
		return
	}

	// –°—á—ë—Ç—á–∏–∫–∏
	const interped = dreamsInPeriod.filter(d => {
		const llm = readLlm(d)
		return !!(
			llm.short_title ||
			llm.esoteric_interpretation ||
			llm.barnum_insight
		)
	})

	const streak = calculateDreamStreak(dreamsInPeriod)

	// TOP-3 —Å–∏–º–≤–æ–ª–æ–≤
	const symbolCounts: Record<string, number> = {}
	for (const d of dreamsInPeriod) {
		const llm = readLlm(d)
		const fromLlm = Array.isArray(llm.symbols_detected)
			? (llm.symbols_detected as string[])
			: []
		const fromRaw = d.symbolsRaw
			? String(d.symbolsRaw)
					.split(/[,;]/)
					.map(s => s.trim())
					.filter(Boolean)
			: []
		for (const s of [...fromLlm, ...fromRaw]) {
			const key = String(s).toLowerCase()
			if (!key) continue
			symbolCounts[key] = (symbolCounts[key] || 0) + 1
		}
	}
	const topSymbols = Object.entries(symbolCounts)
		.sort((a, b) => b[1] - a[1])
		.slice(0, 3)
		.map(([symbol, count]) => ({ symbol, count }))

	// LLM summary (–æ–∂–∏–¥–∞–µ—Ç—Å—è string)
	const periodDays = 7 as 7
	let llmSummary = '–ü–µ—Ä–∏–æ–¥ —Å–ø–æ–∫–æ–π–Ω—ã–π, –±–µ–∑ —è—Ä–∫–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ–±—Ä–∞–∑–æ–≤ üôÇ'
	try {
		const profileUser = await getOrCreateUser(userId)
		llmSummary = await generateReportSummary({
			periodDays,
			countDreams: dreamsInPeriod.length,
			countInterps: interped.length,
			streakMax: streak,
			topSymbols,
			plan: isPaidPlan(user.plan) ? 'paid' : 'free',
			profile: {
				stressLevel: profileUser.stressLevel ?? null,
				sleepGoal: profileUser.sleepGoal ?? null,
				chronotype: profileUser.chronotype ?? null,
			},
		})
	} catch {
		if (topSymbols.length >= 2) {
			llmSummary = `–ü–µ—Ä–∏–æ–¥ –ø–æ–¥ –∑–Ω–∞–∫–æ–º ${topSymbols[0].symbol} –∏ ${topSymbols[1].symbol} ‚Äî –ø—Ä–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –º—è–≥–∫–æ–µ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ ‚ú®`
		} else if (topSymbols.length === 1) {
			llmSummary = `–ü–µ—Ä–∏–æ–¥ –ø–æ–¥ –∑–Ω–∞–∫–æ–º ${topSymbols[0].symbol} ‚Äî –æ–±—Ä–∞–∑ –ø—Ä–æ—Å–∏—Ç –≤–Ω–∏–º–∞–Ω–∏—è ‚ú®`
		}
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ
	let html = `<b>üìà –û—Ç—á—ë—Ç –∑–∞ 7 –¥–Ω–µ–π</b>\n\n`
	
	// Add timezone warning if timezone is empty
	if (isTimezoneEmpty) {
		html += `‚ö†Ô∏è –¢–∞–π–º–∑–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ—Ç—á—ë—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ UTC. –£–∫–∞–∂–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n`
	}
	
	html += `‚Ä¢ –°–Ω–æ–≤: ${dreamsInPeriod.length} ‚Ä¢ –†–∞–∑–±–æ—Ä–æ–≤: ${interped.length} ‚Ä¢ –°—Ç—Ä–∏–∫: ${streak} –¥–Ω–µ–π\n\n`
	if (topSymbols.length) {
		html +=
			`–¢–û–ü-3 —Å–∏–º–≤–æ–ª–æ–≤:\n` +
			topSymbols
				.map((s, i) => `${i + 1}) ${esc(s.symbol)} ‚Äî ${s.count}`)
				.join('\n') +
			'\n\n'
	} else {
		html += `–°–∏–º–≤–æ–ª—ã –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.\n\n`
	}
	html += `–ù–∏—Ç—å –Ω–µ–¥–µ–ª–∏:\n${esc(llmSummary)}`

	const kb = new InlineKeyboard()
		.text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', 'sleep:start')
		.row()
		.text('üìî –î–Ω–µ–≤–Ω–∏–∫', 'analytics:tab:journal')
	
	// Add timezone change button if timezone is empty
	if (isTimezoneEmpty) {
		kb.row().text('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É', 'profile:timezone:menu')
	}
	
	if (!isPaidPlan(user.plan)) {
		kb.row().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
	}

	await ctx.reply(html, { parse_mode: 'HTML', reply_markup: kb })

	// –ü–æ–º–µ—á–∞–µ–º –≤—ã–¥–∞—á—É –æ—Ç—á—ë—Ç–∞
	const now = new Date()
	if (isPaidPlan(user.plan)) {
		// –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –æ–±–Ω–æ–≤–ª—è–µ–º lastReportAt
		await updateUser(userTgId, { lastReportAt: now })
	} else {
		// –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –æ–±–Ω–æ–≤–ª—è–µ–º lastReportMonth
		const currentMonth = ymInTz(now, tz)
		await updateUser(userTgId, { lastReportMonth: currentMonth })
	}
}

/** –ü—É–±–ª–∏—á–Ω—ã–µ API */
export async function handleReportEntry(ctx: MyContext): Promise<void> {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω-–∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
	await renderReportPlaceholder(ctx)
}

export function registerReportFlow(bot: Bot<MyContext>): void {
	bot.command('report', handleReportEntry)
	bot.callbackQuery('report:get:7', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await handleReportEntry(ctx)
	})
	
	// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
	bot.callbackQuery('report:generate:7', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await renderSevenDayReport(ctx)
	})
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º
export const handleReportCommand = handleReportEntry
