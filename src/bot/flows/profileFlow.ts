import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import type { MyContext } from '../helpers/state.js'

import {
	findLatestPendingDream,
	getOrCreateUser,
	updateUser,
	updateUserProfile,
} from '../../db/repo.js'
import { detectTimezoneByIP } from '../../util/timezone.js'
import {
	isProfileComplete,
	isValidTimeZone,
	sendProfileReadyCta,
} from '../helpers/profile.js'

/* ------------------------- helpers: –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ------------------------- */
function ruChronotype(v?: string) {
	switch (v) {
		case 'lark':
			return '–∂–∞–≤–æ—Ä–æ–Ω–æ–∫'
		case 'owl':
			return '—Å–æ–≤–∞'
		case 'mixed':
			return '—Å–º–µ—à–∞–Ω–Ω—ã–π'
		default:
			return '‚Äî'
	}
}
function ruGoal(v?: string) {
	switch (v) {
		case 'fall_asleep':
			return '–ª—É—á—à–µ –∑–∞—Å—ã–ø–∞—Ç—å'
		case 'remember':
			return '–∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–Ω—ã'
		case 'symbols':
			return '–ø–æ–Ω–∏–º–∞—Ç—å —Å–∏–º–≤–æ–ª—ã'
		case 'less_anxiety':
			return '–º–µ–Ω—å—à–µ —Ç—Ä–µ–≤–æ–≥–∏'
		default:
			return '‚Äî'
	}
}

/* ----------------------- –∫–∞—Ä—Ç–æ—á–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ------------------------- */
function profileCard(u: any) {
	return [
		'*–ü—Ä–æ—Ñ–∏–ª—å*',
		`‚è∞ –¢–∞–π–º–∑–æ–Ω–∞: ${u.timezone ? `*${u.timezone}*` : '¬´–Ω–µ —É–∫–∞–∑–∞–Ω–∞¬ª'}`,
		`üë∂ –í–æ–∑—Ä–∞—Å—Ç: ${u.ageBand ?? '‚Äî'}`,
		`üïä –•—Ä–æ–Ω–æ—Ç–∏–ø: ${ruChronotype(u.chronotype)}`,
		`üåÖ –í—Å—Ç–∞—é –æ–±—ã—á–Ω–æ: ${u.wakeTime ?? '‚Äî'}`,
		`üåô –õ–æ–∂—É—Å—å –æ–±—ã—á–Ω–æ: ${u.sleepTime ?? '‚Äî'}`,
		`ü´ß –°—Ç—Ä–µ—Å—Å (0‚Äì10): ${u.stressLevel ?? '‚Äî'}`,
		'',
		'_–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–æ—Ä–∞._',
	].join('\n')
}
function profileKb() {
	return new InlineKeyboard()
		.text('üë∂ –í–æ–∑—Ä–∞—Å—Ç', 'profile:age:menu')
		.text('üåëüåû –•—Ä–æ–Ω–æ—Ç–∏–ø', 'profile:chronotype:menu')
		.row()
		.text('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É', 'profile:timezone:menu')
		.row()
		.text('‚è∞ –†–µ–∂–∏–º —Å–Ω–∞', 'profile:sleep:menu') // Changed to profile:sleep:menu for the new wizard
		.row()
		.text('ü´ß –°—Ç—Ä–µ—Å—Å', 'profile:stress:menu')
}

async function maybeFinishOnboarding(ctx: MyContext) {
	const u = await getOrCreateUser(String(ctx.from!.id))
	if (isProfileComplete(u) && ctx.session.onboarding?.active) {
		ctx.session.onboarding!.active = false
		await sendProfileReadyCta(ctx)
	}
}

async function createTimezoneMenu(): Promise<InlineKeyboard> {
	return new InlineKeyboard()
		.text('üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'profile:timezone:auto')
		.row()
		.text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:timezone:manual')
		.row()
		.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'profile:open')
}

/* --------------------------- –ø—É–±–ª–∏—á–Ω—ã–µ API ----------------------------- */
export async function openProfile(ctx: MyContext) {
	const tgId = ctx.from?.id.toString()
	if (!tgId) return
	const u = await getOrCreateUser(tgId)
	await ctx.reply(profileCard(u), {
		reply_markup: profileKb(),
		parse_mode: 'Markdown',
	})

	// –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–ª –ø–æ–ª–Ω—ã–º, –∏ –µ—Å—Ç—å "–∂–¥—É—â–∏–π" —Å–æ–Ω
	if (isProfileComplete(u)) {
		const pendingDream = await findLatestPendingDream(u.id) // Assuming u.id is dbUserId
		if (pendingDream) {
			const kb = new InlineKeyboard()
				.text('üîÆ –†–∞–∑–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å', `interpret:run:${pendingDream.id}`)
				.row()
				.text('‚úç –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π', 'sleep:start')
			await ctx.reply(
				[
					'–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω! üéâ',
					'–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–æ–Ω?',
				].join('\n'),
				{ reply_markup: kb }
			)
		}
	}
}

export async function handleProfileMessage(ctx: MyContext): Promise<boolean> {
	const conv = ctx.session.conversation
	const userId = ctx.from?.id.toString()
	if (!userId || !conv) return false

	if (conv.type === 'profile_tz_manual' && conv.stage === 'awaiting_tz') {
		const tz = ctx.message?.text?.trim()
		if (!tz || !isValidTimeZone(tz)) {
			await ctx.reply(
				'–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ IANA-—Ç–∞–π–º–∑–æ–Ω—É. –ü—Ä–∏–º–µ—Ä: Europe/Moscow. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return true
		}
		await updateUser(String(ctx.from!.id), { timezone: tz })
		await ctx.reply(
			`‚úÖ –¢–∞–π–º–∑–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${tz}\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ø—Ä–æ—Ñ–∏–ª–µ.`
		)
		const fresh = await getOrCreateUser(String(ctx.from!.id))
		if (isProfileComplete(fresh)) {
			await sendProfileReadyCta(ctx)
		}
		ctx.session.conversation = undefined
		return true
	}

	if (conv.type !== 'profile') return false // Existing profile messages

	const text = ctx.message?.text?.trim()
	if (!text) {
		await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
		return true
	}

	// Handle sleep wizard input
	if (ctx.session.sleepWizard) {
		const isValid = /^([01]\d|2[0-3]):[0-5]\d$/.test(text)
		if (!isValid) {
			await ctx.reply(
				'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ HH:MM (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30.'
			)
			return true
		}

		const updateData: any = {}
		if (ctx.session.sleepWizard.step === 'wake') {
			updateData.wakeTime = text
		} else {
			updateData.sleepTime = text
		}

		try {
			await updateUserProfile(userId, updateData)
		} catch (e) {
			console.error('Failed to update profile for sleep time:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return true
		}

		if (ctx.session.sleepWizard.step === 'wake') {
			ctx.session.sleepWizard.step = 'bed'
			const kb = new InlineKeyboard()
			for (let i = 22; i <= 24; i++) {
				// 22:00, 22:30, ..., 00:00
				const hour = i % 24
				kb.text(
					`${String(hour).padStart(2, '0')}:00`,
					`profile:sleeptime:set:${String(hour).padStart(2, '0')}:00`
				)
				kb.text(
					`${String(hour).padStart(2, '0')}:30`,
					`profile:sleeptime:set:${String(hour).padStart(2, '0')}:30`
				)
				if ((i - 22 + 2) % 4 === 0) kb.row() // Every 2 hours (4 half-hour options)
			}
			kb.text('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:sleep:manual_bed').row()
			await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É.', {
				reply_markup: kb,
			})
		} else {
			// 'bed'
			delete ctx.session.sleepWizard
			delete ctx.session.conversation // Clear general conversation state too
			const u = await getOrCreateUser(userId)
			await ctx.reply(profileCard(u), {
				reply_markup: profileKb(),
				parse_mode: 'Markdown',
			})
			await maybeFinishOnboarding(ctx)
		}
		return true
	}

	// Old handling for awaitingWakeTime and awaitingSleepTime (remove as wizard handles it)
	if (conv.stage === 'awaitingWakeTime' || conv.stage === 'awaitingSleepTime') {
		// This block is now handled by the sleepWizard logic above
		return false
	}

	if (conv.stage === 'awaitingTimezone') {
		if (!isValidTimeZone(text)) {
			await ctx.reply(
				'‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ IANA‚Äë—Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä—ã: Europe/Moscow, Asia/Yekaterinburg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äû–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ‚Äú',
				{
					reply_markup: new InlineKeyboard()
						.text('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', 'profile:timezone:menu')
						.text('–û—Ç–º–µ–Ω–∞', 'profile:timezone:cancel'),
				}
			)
			return true
		}
		try {
			await updateUserProfile(userId, { timezone: text })
			delete ctx.session.conversation
			const u = await getOrCreateUser(userId)
			await ctx.reply(
				`‚úÖ –¢–∞–π–º–∑–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *${text}*\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ø—Ä–æ—Ñ–∏–ª–µ.`,
				{
					parse_mode: 'Markdown',
					reply_markup: profileKb(),
				}
			)
			await maybeFinishOnboarding(ctx) // Check for pending dreams
			return true
		} catch (e) {
			console.error('Failed to update profile for timezone:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞–π–º–∑–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return true
		}
	}

	return false
}

/* --------------------------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è flow -------------------------- */
export function registerProfileFlow(bot: Bot<MyContext>) {
	bot.command('profile', openProfile)

	// –ú–µ–Ω—é —Å–µ–∫—Ü–∏–π
	bot.callbackQuery('profile:age:menu', async ctx => {
		await ctx.answerCallbackQuery()
		await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:', {
			reply_markup: new InlineKeyboard()
				.text('18-24', 'profile:age:18-24')
				.text('25-34', 'profile:age:25-34')
				.row()
				.text('35-44', 'profile:age:35-44')
				.text('45-54', 'profile:age:45-54')
				.row()
				.text('55+', 'profile:age:55+'),
		})
	})

	bot.callbackQuery('profile:chronotype:menu', async ctx => {
		await ctx.answerCallbackQuery()
		await ctx.editMessageText('–í–∞—à —Ö—Ä–æ–Ω–æ—Ç–∏–ø:', {
			reply_markup: new InlineKeyboard()
				.text('–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫', 'profile:chronotype:lark')
				.text('–°–æ–≤–∞', 'profile:chronotype:owl')
				.row()
				.text('–°–º–µ—à–∞–Ω–Ω—ã–π', 'profile:chronotype:mixed'),
		})
	})

	// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã (–Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
	bot.callbackQuery('profile:timezone:menu', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É ‚è±Ô∏è', {
			reply_markup: await createTimezoneMenu(),
		})
	})

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã
	bot.callbackQuery('profile:timezone:auto', async ctx => {
		await ctx.answerCallbackQuery('üîç –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à–µ –≤—Ä–µ–º—è...')
		const userId = String(ctx.from!.id)

		try {
			const tz = await detectTimezoneByIP()

			if (tz) {
				await updateUser(userId, { timezone: tz })
				await ctx.reply(`‚úÖ –í—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${tz}`)
				const fresh = await getOrCreateUser(userId)
				if (isProfileComplete(fresh)) {
					await sendProfileReadyCta(ctx)
				}
			} else {
				const kb = new InlineKeyboard()
					.text('üåç –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', 'profile:timezone:popular')
					.row()
					.text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:timezone:manual')

				await ctx.reply(
					'ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±:',
					{ reply_markup: kb }
				)
			}
		} catch (error) {
			const kb = new InlineKeyboard()
				.text('üåç –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', 'profile:timezone:popular')
				.row()
				.text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:timezone:manual')

			await ctx.reply(
				'‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±:',
				{ reply_markup: kb }
			)
		}
	})

	// –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–∞–π–º–∑–æ–Ω—ã (–≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è)
	bot.callbackQuery('profile:timezone:manual', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		ctx.session.conversation = {
			type: 'profile_tz_manual',
			stage: 'awaiting_tz',
		}
		await ctx.reply(
			'‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ.'
		)
	})
	// Sleep mode mini-wizard entry
	bot.callbackQuery('profile:sleep:menu', async ctx => {
		await ctx.answerCallbackQuery()
		ctx.session.sleepWizard = { step: 'wake' }
		const kb = new InlineKeyboard()
		for (let i = 6; i <= 9; i++) {
			// 06:00, 06:30, ..., 09:00
			kb.text(
				`${String(i).padStart(2, '0')}:00`,
				`profile:waketime:set:${String(i).padStart(2, '0')}:00`
			)
			kb.text(
				`${String(i).padStart(2, '0')}:30`,
				`profile:waketime:set:${String(i).padStart(2, '0')}:30`
			)
			if (i < 9) kb.row()
		}
		kb.text('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:sleep:manual_wake').row()
		await ctx.editMessageText('–®–∞–≥ 1 –∏–∑ 2: –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥—ä—ë–º–∞.', {
			reply_markup: kb,
		})
	})

	// Handle manual wake time input within the wizard
	bot.callbackQuery('profile:sleep:manual_wake', async ctx => {
		await ctx.answerCallbackQuery()
		ctx.session.conversation = { type: 'profile', stage: 'awaitingWakeTime' }
		await ctx.reply(
			'‚úç –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥—ä—ë–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30).'
		)
	})

	// Handle manual bed time input within the wizard
	bot.callbackQuery('profile:sleep:manual_bed', async ctx => {
		await ctx.answerCallbackQuery()
		ctx.session.conversation = { type: 'profile', stage: 'awaitingSleepTime' }
		await ctx.reply(
			'‚úç –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:45).'
		)
	})
	// –í—Ä–µ–º—è –ø–æ–¥—ä—ë–º–∞ (—Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)
	bot.callbackQuery(/^profile:waketime:set:(\d{2}:\d{2})$/, async ctx => {
		await ctx.answerCallbackQuery()
		const time = ctx.match![1]
		try {
			await updateUserProfile(ctx.from!.id.toString(), { wakeTime: time })
		} catch (e) {
			console.error('Failed to update profile for wake time:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return
		}
		// If we are in the sleep wizard, proceed to the next step
		if (ctx.session.sleepWizard?.step === 'wake') {
			ctx.session.sleepWizard.step = 'bed'
			const kb = new InlineKeyboard()
			for (let i = 22; i <= 24; i++) {
				// 22:00, 22:30, ..., 00:00
				const hour = i % 24
				kb.text(
					`${String(hour).padStart(2, '0')}:00`,
					`profile:sleeptime:set:${String(hour).padStart(2, '0')}:00`
				)
				kb.text(
					`${String(hour).padStart(2, '0')}:30`,
					`profile:sleeptime:set:${String(hour).padStart(2, '0')}:30`
				)
				if ((i - 22 + 2) % 4 === 0) kb.row() // Every 2 hours (4 half-hour options)
			}
			kb.text('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'profile:sleep:manual_bed').row()
			await ctx.editMessageText(
				'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É.',
				{ reply_markup: kb }
			)
		} else {
			// Otherwise, return to profile and check for onboarding completion
			const u = await getOrCreateUser(ctx.from!.id.toString())
			await ctx.editMessageText(profileCard(u), {
				reply_markup: profileKb(),
				parse_mode: 'Markdown',
			})
			await maybeFinishOnboarding(ctx)
		}
	})

	// –í—Ä–µ–º—è —Å–Ω–∞ (—Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)
	bot.callbackQuery(/^profile:sleeptime:set:(\d{2}:\d{2})$/, async ctx => {
		await ctx.answerCallbackQuery()
		const time = ctx.match![1]
		try {
			await updateUserProfile(ctx.from!.id.toString(), { sleepTime: time })
		} catch (e) {
			console.error('Failed to update profile for sleep time:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return
		}
		delete ctx.session.sleepWizard // Clear wizard state
		delete ctx.session.conversation // Clear general conversation state
		// Always return to profile after setting sleep time
		const u = await getOrCreateUser(ctx.from!.id.toString())
		await ctx.editMessageText(profileCard(u), {
			reply_markup: profileKb(),
			parse_mode: 'Markdown',
		})
		await maybeFinishOnboarding(ctx)
	})

	// ¬´–î—Ä—É–≥–æ–µ¬ª ‚Äî –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä—É–∫–∞–º–∏ (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ç –¥–ª—è –º–∏–Ω–∏-–≤–∏–∑–∞—Ä–¥–∞)
	bot.callbackQuery('profile:waketime:other', async ctx => {
		// This handler is now replaced by profile:sleep:manual_wake
		return ctx.answerCallbackQuery()
	})
	bot.callbackQuery('profile:sleeptime:other', async ctx => {
		// This handler is now replaced by profile:sleep:manual_bed
		return ctx.answerCallbackQuery()
	})

	// –í–æ–∑—Ä–∞—Å—Ç / —Ö—Ä–æ–Ω–æ—Ç–∏–ø / —Ü–µ–ª—å
	bot.callbackQuery(
		/^profile:age:(18-24|25-34|35-44|45-54|55\+)$/,
		async ctx => {
			await ctx.answerCallbackQuery()
			try {
				await updateUserProfile(ctx.from!.id.toString(), {
					ageBand: ctx.match![1] as any,
				})
			} catch (e) {
				console.error('Failed to update profile for age band:', e)
				await ctx.reply(
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
				)
				return
			}
			const u = await getOrCreateUser(ctx.from!.id.toString())
			await ctx.editMessageText(profileCard(u), {
				reply_markup: profileKb(),
				parse_mode: 'Markdown',
			})
			await maybeFinishOnboarding(ctx) // Check for pending dreams
		}
	)

	bot.callbackQuery(/^profile:chronotype:(lark|owl|mixed)$/, async ctx => {
		await ctx.answerCallbackQuery()
		try {
			await updateUserProfile(ctx.from!.id.toString(), {
				chronotype: ctx.match![1] as any,
			})
		} catch (e) {
			console.error('Failed to update profile for chronotype:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö—Ä–æ–Ω–æ—Ç–∏–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return
		}
		const u = await getOrCreateUser(ctx.from!.id.toString())
		await ctx.editMessageText(profileCard(u), {
			reply_markup: profileKb(),
			parse_mode: 'Markdown',
		})
		await maybeFinishOnboarding(ctx) // Check for pending dreams
	})

	// –ú–µ–Ω—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞
	bot.callbackQuery('profile:stress:menu', async ctx => {
		await ctx.answerCallbackQuery()
		await ctx.editMessageText('–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (0‚Äì10):', {
			reply_markup: new InlineKeyboard()
				.text('0', 'profile:stress:set:0')
				.text('1', 'profile:stress:set:1')
				.text('2', 'profile:stress:set:2')
				.text('3', 'profile:stress:set:3')
				.text('4', 'profile:stress:set:4')
				.text('5', 'profile:stress:set:5')
				.row()
				.text('6', 'profile:stress:set:6')
				.text('7', 'profile:stress:set:7')
				.text('8', 'profile:stress:set:8')
				.text('9', 'profile:stress:set:9')
				.text('10', 'profile:stress:set:10'),
		})
	})

	bot.callbackQuery(/^profile:stress:set:(\d{1,2})$/, async ctx => {
		await ctx.answerCallbackQuery()
		const n = Math.max(0, Math.min(10, parseInt(ctx.match![1], 10)))
		try {
			await updateUserProfile(ctx.from!.id.toString(), { stressLevel: n })
		} catch (e) {
			console.error('Failed to update profile for stress level:', e)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
			)
			return
		}
		const u = await getOrCreateUser(ctx.from!.id.toString())
		await ctx.editMessageText(profileCard(u), {
			reply_markup: profileKb(),
			parse_mode: 'Markdown',
		})
		await maybeFinishOnboarding(ctx) // Check for pending dreams
	})
}
