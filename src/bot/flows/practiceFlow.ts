// src/bot/flows/practiceFlow.ts
import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import { generatePractice } from '../../core/llm.js'
import { isPaidPlan } from '../../core/pricing.js'
import {
	getDreamEntryById,
	getOrCreateUser,
	updateDreamEntryKeywords,
} from '../../db/repo.js'
import { logger } from '../../util/logger.js'
import type { MyContext } from '../helpers/state.js'

/** YYYY-MM-DD –≤ tz (–∏–ª–∏ UTC –ø—Ä–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏) */
function ymdInTz(date: Date, tz?: string | null): string {
	// en-CA –¥–∞—ë—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
	return new Intl.DateTimeFormat('en-CA', {
		timeZone: tz ?? 'UTC',
		year: 'numeric',
		month: '2-digit',
		day: '2-digit',
	}).format(date)
}
/** YYYY-MM –≤ tz (–∏–ª–∏ UTC) */
function ymInTz(date: Date, tz?: string | null): string {
	return ymdInTz(date, tz).slice(0, 7)
}

/** –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º keywords-—Å—Ç—Ä–æ–∫—É –≤ Set */
function parseKeywordsToSet(keywords: string | null | undefined): Set<string> {
	const set = new Set<string>()
	if (!keywords) return set
	for (const raw of keywords.split(',')) {
		const v = raw.trim()
		if (v) set.add(v)
	}
	return set
}

export function registerPracticeFlow(bot: Bot<MyContext>): void {
	bot.callbackQuery(/^practice:(interpret|followup):(.+)$/, async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})

		const userId = String(ctx.from?.id ?? '')
		if (!userId) return

		const source = ctx.match![1] as 'interpret' | 'followup'
		const entryId = ctx.match![2]

		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		const user = await getOrCreateUser(userId)

		// –ó–∞–ø–∏—Å—å —Å–Ω–∞
		const dreamEntry = await getDreamEntryById(entryId)
		if (!dreamEntry || dreamEntry.userId !== user.id) {
			await ctx.reply('–ó–∞–ø–∏—Å—å —Å–Ω–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
			return
		}

		// –ö–ª—é—á–∏ –ª–∏–º–∏—Ç–æ–≤ (—Å —É—á—ë—Ç–æ–º TZ –∏–ª–∏ UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
		const todayYMD = ymdInTz(new Date(), user.timezone)
		const dayKey = `practice_issued:${todayYMD}`
		const monthKey = `practice_issued:${ymInTz(new Date(), user.timezone)}`

		const kwSet = parseKeywordsToSet(dreamEntry.keywords)
		const paid = isPaidPlan(user.plan)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
		if (paid) {
			// –ü–ª–∞—Ç–Ω—ã–µ ‚Äî 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
			if (kwSet.has(dayKey)) {
				await ctx.reply(
					'–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ ‚ú®'
				)
				return
			}
		} else {
			// –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ ‚Äî 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
			if (kwSet.has(monthKey)) {
				const kb = new InlineKeyboard().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
				await ctx.reply(
					'–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü üí´',
					{
						reply_markup: kb,
					}
				)
				return
			}
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
		const interpretation = dreamEntry.llmJsonText ?? ''
		const entryText = dreamEntry.text ?? ''
		let practiceContent = ''
		try {
			practiceContent = await generatePractice({
				entry_text: entryText,
				interpretation,
			})
		} catch (e) {
			logger.error({ err: e, entryId }, 'generatePractice failed')
			await ctx.reply(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ.'
			)
			return
		}

		// –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await ctx.reply(`‚ú® –î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n\n${practiceContent}`)

		// –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ keywords –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
		kwSet.add(paid ? dayKey : monthKey)
		const newKeywords = Array.from(kwSet).join(', ')
		await updateDreamEntryKeywords(entryId, newKeywords)

		logger.info(
			`Practice issued: userId=${userId}, entryId=${entryId}, key=${
				paid ? dayKey : monthKey
			}, source=${source}`
		)
	})
}
