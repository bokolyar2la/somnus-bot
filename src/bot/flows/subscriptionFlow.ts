// src/bot/flows/subscriptionFlow.ts
import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import crypto from 'node:crypto'
import { config } from '../../util/config.js'
import type { MyContext } from '../helpers/state.js'
import { mainKb } from '../keyboards.js'

/** –ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç (HTML) */
function subscribeText(): string {
	return [
		'üîë <b>–ß—Ç–æ –¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫–∞ AI-–°–æ–Ω–Ω–∏–∫?</b>',
		'',
		'üîÆ <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã —Å–Ω–æ–≤</b> ‚Äî –≥–ª—É–±–∂–µ –∏ —Ç–æ—á–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–Ω–Ω–∏–∫–∏.',
		'üí¨ <b>–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã</b> –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.',
		'üßò <b>–î—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</b> ‚Äî –¥—ã—Ö–∞–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã.',
		'üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä</b> ‚Äî –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.',
		'üìÇ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞</b> ‚Äî PDF, TXT –∏–ª–∏ Markdown.',
		'',
		'üí´ <b>–¢–∞—Ä–∏—Ñ—ã:</b>',
		'‚ñ´ 1 –Ω–µ–¥–µ–ª—è ‚Äî 99 ‚ÇΩ',
		'üåü 1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ <i>(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)</i>',
		'‚ñ´ 1 –≥–æ–¥ ‚Äî 2490 ‚ÇΩ <i>(–≤—ã–≥–æ–¥–∞ ~30%)</i>',
	].join('\n')
}

/** –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ callback‚Äô–∞–º–∏ */
function subscribeKb(): InlineKeyboard {
	return new InlineKeyboard()
		.text('1 –Ω–µ–¥–µ–ª—è ‚Äî 99 ‚ÇΩ', 'pay:week')
		.row()
		.text('üåü 1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ', 'pay:month')
		.row()
		.text('1 –≥–æ–¥ ‚Äî 2490 ‚ÇΩ', 'pay:year')
		.row()
		.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'pay:back')
}

/** –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ */
export async function sendSubscribeMessage(ctx: MyContext): Promise<void> {
	await ctx.reply(subscribeText(), {
		parse_mode: 'HTML',
		reply_markup: subscribeKb(),
	})
}

/** –¢–µ—Ö. email –¥–ª—è —á–µ–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ) */
function makeCustomerEmail(ctx: MyContext): string {
	if (ctx.from?.username) return `${ctx.from.username}@t.me`
	return `tg${ctx.from?.id ?? 'user'}@sonmus.ru`
}

/** –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa */
async function createYooPayment(params: {
	amountRub: string // "99.00"
	tgId: string
	plan: 'week' | 'month' | 'year'
	returnUrl: string // –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
	customerEmail: string
}) {
	const { amountRub, tgId, plan, returnUrl, customerEmail } = params
	const idempotenceKey = crypto.randomUUID()

	const auth = Buffer.from(
		`${config.YOOKASSA_SHOP_ID}:${config.YOOKASSA_SECRET_KEY}`
	).toString('base64')

	// –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π payload —Å —á–µ–∫–æ–º
	const description = `AI-–°–æ–Ω–Ω–∏–∫: –ø–æ–¥–ø–∏—Å–∫–∞ (${plan})`
	const payload = {
		amount: { value: amountRub, currency: 'RUB' },
		capture: true,
		description,
		confirmation: {
			type: 'redirect' as const,
			return_url: returnUrl,
		},
		metadata: {
			uid: tgId,
			plan,
		},
		receipt: {
			customer: { email: customerEmail }, // email –∏–ª–∏ phone –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
			items: [
				{
					description,
					quantity: '1.00',
					amount: { value: amountRub, currency: 'RUB' },
					vat_code: 1, // 1 ‚Äî –±–µ–∑ –ù–î–°
					payment_subject: 'service', // –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á—ë—Ç–∞ ‚Äî —É—Å–ª—É–≥–∞
					payment_mode: 'full_prepayment', // —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞ ‚Äî –ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
				},
			],
			// –ï—Å–ª–∏ –õ–ö —Ç—Ä–µ–±—É–µ—Ç, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è:
			// tax_system_code: 1,
		},
	}

	const res = await fetch('https://api.yookassa.ru/v3/payments', {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			'Idempotence-Key': idempotenceKey,
			Authorization: `Basic ${auth}`,
		},
		body: JSON.stringify(payload),
	})

	const data = await res.json()
	if (!res.ok) {
		throw new Error(
			`YooKassa error ${res.status}: ${JSON.stringify(data, null, 2)}`
		)
	}
	return data as { confirmation?: { confirmation_url?: string } }
}

/** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ */
export function registerSubscriptionFlow(bot: Bot<MyContext>): void {
	// –æ—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
	bot.callbackQuery('pay:open', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await sendSubscribeMessage(ctx)
	})

	// –Ω–∞–∑–∞–¥
	bot.callbackQuery('pay:back', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainKb })
	})

	// —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–¥–∞—ë–º —Å—Å—ã–ª–∫—É
	bot.callbackQuery(['pay:week', 'pay:month', 'pay:year'], async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})

		const cb = ctx.callbackQuery!.data as 'pay:week' | 'pay:month' | 'pay:year'
		const plan = cb.split(':')[1] as 'week' | 'month' | 'year'
		const tgId = String(ctx.from!.id)

		const AMOUNTS: Record<typeof plan, string> = {
			week: '99.00',
			month: '299.00',
			year: '2490.00',
		}

		await ctx.reply('‚è≥ –°–æ–∑–¥–∞—é —Å—á—ë—Ç‚Ä¶')

		try {
			const me = ctx.me?.username || 'your_bot'
			const customerEmail = makeCustomerEmail(ctx)

			const data = await createYooPayment({
				amountRub: AMOUNTS[plan],
				tgId,
				plan,
				returnUrl: `https://t.me/${me}`,
				customerEmail,
			})

			const url = data.confirmation?.confirmation_url
			if (!url) throw new Error('–ù–µ –ø—Ä–∏—à–ª–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É')

			const kb = new InlineKeyboard()
				.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url)
				.row()
				.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'pay:back')

			const label =
				plan === 'week'
					? '1 –Ω–µ–¥–µ–ª—è ‚Äî 99 ‚ÇΩ'
					: plan === 'month'
					? '1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ'
					: '1 –≥–æ–¥ ‚Äî 2490 ‚ÇΩ'

			await ctx.reply(
				`–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: <b>${label}</b>\n–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥—ë—Ç –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ YooKassa.`,
				{ parse_mode: 'HTML', reply_markup: kb }
			)
		} catch (e: any) {
			await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: ${e?.message ?? String(e)}`)
		}
	})

	// /pay –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç
	bot.command('pay', sendSubscribeMessage)
}
