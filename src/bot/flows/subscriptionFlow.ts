// src/bot/flows/subscriptionFlow.ts
import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import type { MyContext } from '../helpers/state.js'
import { mainKb } from '../keyboards.js'

/** –ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç (HTML) */
function subscribeText(): string {
	return [
		'üîë <b>–ß—Ç–æ –¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫–∞ AI‚Äë–°–æ–Ω–Ω–∏–∫?</b>',
		'',
		'üîÆ <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã —Å–Ω–æ–≤</b> ‚Äî –≥–ª—É–±–∂–µ –∏ —Ç–æ—á–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–Ω–Ω–∏–∫–∏.',
		'üí¨ <b>–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã</b> –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.',
		'üßò <b>–î—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</b> ‚Äî –¥—ã—Ö–∞–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –ø–æ–¥ –≤–∞—à —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π —Å—é–∂–µ—Ç.',
		'üìä <b>–ü–æ–ª–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä</b> ‚Äî –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã, —ç–º–æ—Ü–∏–∏ –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.',
		'üìÇ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞</b> ‚Äî PDF, TXT –∏–ª–∏ Markdown –¥–ª—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π ‚Äú–∫–Ω–∏–≥–∏ —Å–Ω–æ–≤‚Äù.',
		'',
		'‚ö°Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ –≥–ª—É–±–∏–Ω–Ω–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–Ω—ã –≤ –ª–∏—á–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä.',
		'',
		'üí´ <b>–¢–∞—Ä–∏—Ñ—ã:</b>',
		'‚ñ´ 1 –Ω–µ–¥–µ–ª—è ‚Äî 99 ‚ÇΩ <i></i>',
		'üåü 1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ <i>(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)</i>',
		'‚ñ´ 1 –≥–æ–¥ ‚Äî 2490 ‚ÇΩ <i>(–≤—ã–≥–æ–¥–∞ ~30%)</i>',
	].join('\n')
}

/** –ï–¥–∏–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã ‚Üí pay:open, –ø–ª—é—Å ¬´–ù–∞–∑–∞–¥¬ª */
function subscribeKb(): InlineKeyboard {
	return new InlineKeyboard()
		.text('1 –Ω–µ–¥–µ–ª—è ‚Äî 99 ‚ÇΩ', 'pay:open')
		.row()
		.text('üåü 1 –º–µ—Å—è—Ü ‚Äî 299 ‚ÇΩ', 'pay:open')
		.row()
		.text('1 –≥–æ–¥ ‚Äî 2490 ‚ÇΩ', 'pay:open')
		.row()
		.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'pay:back')
}

/** –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ */
export async function sendSubscribeMessage(ctx: MyContext): Promise<void> {
	await ctx.reply(subscribeText(), {
		parse_mode: 'HTML',
		reply_markup: subscribeKb(),
	})
}

/** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è pay:open / pay:back */
export function registerSubscriptionFlow(bot: Bot<MyContext>): void {
	// –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ª—é–±—ã—Ö –º–µ—Å—Ç
	bot.callbackQuery('pay:open', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await sendSubscribeMessage(ctx)
	})

	// –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	bot.callbackQuery('pay:back', async ctx => {
		await ctx.answerCallbackQuery().catch(() => {})
		await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainKb })
	})

	// –ö–æ–º–∞–Ω–¥–∞ /pay –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
	bot.command('pay', sendSubscribeMessage)
}
