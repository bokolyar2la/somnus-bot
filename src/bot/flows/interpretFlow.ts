// src/bot/flows/interpretFlow.ts
import type { Bot } from 'grammy'
import { InlineKeyboard } from 'grammy'
import { interpretDream } from '../../core/llm.js'
import {
	canAskFollowup,
	canInterpret,
	getMonthlyFollowups,
	getMonthlyQuota,
} from '../../core/pricing.js'
import {
	clearKeyword,
	ensureMonthlyReset,
	getDreamEntryById,
	getLastDream,
	getOrCreateUser,
	incMonthlyCount,
	saveEntryCost,
	saveInterpretation,
	updateUser,
} from '../../db/repo.js'
import { isAdmin } from '../../util/auth.js'
import { estimateCostRub } from '../../util/cost.js'
import { logger } from '../../util/logger.js'
import { isProfileComplete } from '../helpers/profile.js'
import type { MyContext } from '../helpers/state.js'

/* ----------------------------- helpers ----------------------------- */

function shouldNudgeProfile(session: MyContext['session']): boolean {
	const iso = session.onboarding?.lastProfileNudgeAt
	if (!iso) return true
	const last = new Date(iso).getTime()
	const now = Date.now()
	// –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 24 —á–∞—Å–∞
	return now - last > 24 * 60 * 60 * 1000
}

/** –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML */
const esc = (s: string) =>
	s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')

/* ----------------------- –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ --------------------- */

async function runInterpretation(
	ctx: MyContext,
	entryId: string,
	userId: string
) {
	let user = await getOrCreateUser(userId)
	const dreamEntry = await getDreamEntryById(entryId)

	if (!dreamEntry) {
		await ctx.reply('–ó–∞–ø–∏—Å—å —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep.')
		return
	}

	// –ù–ò–ß–ï–ì–û –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ñ–∏–ª—é/—Ç–∞–π–º–∑–æ–Ω–µ ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Ä–∞–∑–±–æ—Ä
	await ctx.reply('üîÆ –ì–æ—Ç–æ–≤–ª—é —Ä–∞–∑–±–æ—Ä... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')

	try {
		// –º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞
		await ensureMonthlyReset(user.id)
		user = await getOrCreateUser(userId)

		// –ª–∏–º–∏—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π (–∞–¥–º–∏–Ω ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
		if (!isAdmin(ctx.from?.id)) {
			const plan = (user.plan as any) ?? 'free'
			const used = user.monthlyCount ?? 0
			if (!canInterpret(plan, used)) {
				const total = getMonthlyQuota(plan)
				const left = Math.max(0, total - used)
				const kb = new InlineKeyboard().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
				await ctx.reply(
					`–í–∞—à –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞–∑–±–æ—Ä–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ü–ª–∞–Ω: ${plan}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used}/${total}\n–û—Å—Ç–∞–ª–æ—Å—å: ${left}`,
					{ reply_markup: kb }
				)
				return
			}
		}

		// –µ—Å–ª–∏ –±—ã–ª–∞ –º–µ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ‚Äî —Å–Ω—è—Ç—å
		if (dreamEntry.keywords?.includes('awaiting_profile')) {
			await clearKeyword(entryId, 'awaiting_profile')
		}

		const payload = {
			profile: {
				timezone: user.timezone ?? 'UTC',
				ageBand: (user.ageBand ?? undefined) as any,
				chronotype: (user.chronotype ?? undefined) as any,
				tone: 'poetic' as const,
				esotericaLevel: user.esotericaLevel ?? 50,
				sleepGoal: (user.sleepGoal ?? undefined) as any,
				wakeTime: user.wakeTime ?? undefined,
				sleepTime: user.sleepTime ?? undefined,
				stressLevel: user.stressLevel ?? undefined,
				dreamFrequency: (user.dreamFrequency ?? undefined) as any,
			},
			dream_text: dreamEntry.text,
			user_symbols: dreamEntry.symbolsRaw
				? dreamEntry.symbolsRaw
						.split(',')
						.map(s => s.trim())
						.filter(Boolean)
				: undefined,
		}

		const out = await interpretDream(payload)

		// —Ç–æ–∫–µ–Ω—ã/—Å—Ç–æ–∏–º–æ—Å—Ç—å
		const tokensIn = (out as any).usage?.prompt_tokens ?? 500
		const tokensOut = (out as any).usage?.completion_tokens ?? 700
		const costRub = estimateCostRub(tokensIn, tokensOut)

		// —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		await saveInterpretation(dreamEntry.id, { llmJson: out })
		await saveEntryCost(dreamEntry.id, tokensIn, tokensOut, costRub)
		await incMonthlyCount(user.id)

		const html =
			`<b>${esc(out.short_title)}</b>\n\n` +
			`<b>–°–∏–º–≤–æ–ª—ã:</b> ${esc(out.symbols_detected.join(', '))}\n\n` +
			`<b>–ò–Ω—Å–∞–π—Ç:</b> ${esc(out.barnum_insight)}\n\n` +
			`<b>–¢—Ä–∞–∫—Ç–æ–≤–∫–∞:</b> ${esc(out.esoteric_interpretation)}\n\n` +
			`<b>–í–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:</b> ${esc(out.reflective_question)}\n\n` +
			(out.gentle_advice?.length
				? `<b>–ú—è–≥–∫–∏–µ —à–∞–≥–∏:</b>\n` +
				  out.gentle_advice
						.map((s: string, i: number) => `${i + 1}. ${esc(s)}`)
						.join('\n')
				: '')

		const kb = new InlineKeyboard()
			.text('üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', `followup:${dreamEntry.id}`)
			.row()
			.text('‚ú® –î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', `practice:interpret:${dreamEntry.id}`)
			.row()
			.text('üìî –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫', 'analytics:journal')

		await ctx.reply(html, { parse_mode: 'HTML', reply_markup: kb })

		// –æ—Ç–º–µ—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä
		if (!ctx.session.onboarding) ctx.session.onboarding = {}
		if (!ctx.session.onboarding.firstInterpretDone) {
			ctx.session.onboarding.firstInterpretDone = true
			await updateUser(userId, { firstInterpretDone: true })
		}

		// –º—è–≥–∫–∏–π CTA –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞)
		const fresh = await getOrCreateUser(userId)
		if (!isProfileComplete(fresh) && shouldNudgeProfile(ctx.session)) {
			const kb2 = new InlineKeyboard().text(
				'üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
				'profile:open'
			)
			await ctx.reply(
				'‚ú® –†–∞–∑–±–æ—Ä –≥–æ—Ç–æ–≤. –ß—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–±–æ—Ä—ã –±—ã–ª–∏ —Ç–æ—á–Ω–µ–µ (—Å–∏–º–≤–æ–ª—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ—Ç—á—ë—Ç—ã) ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —ç—Ç–æ ~1 –º–∏–Ω—É—Ç–∞.',
				{ reply_markup: kb2 }
			)
			ctx.session.onboarding.lastProfileNudgeAt = new Date().toISOString()
		}
	} catch (e: any) {
		logger.error(e, 'interpret failed')
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.')
	}
}

/* ---------------------------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---------------------------- */

export function registerInterpretFlow(bot: Bot<MyContext>) {
	// –ö–æ–º–∞–Ω–¥–∞: —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–Ω
	bot.command('interpret', async ctx => {
		const userId = ctx.from?.id.toString()
		if (!userId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')

		const user = await getOrCreateUser(userId)
		const last = await getLastDream(user.id)
		if (!last) {
			await ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep.')
			return
		}

		await runInterpretation(ctx, last.id, userId)
	})

	// Inline-–∫–Ω–æ–ø–∫–∞: ¬´–†–∞–∑–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å¬ª (–ø–æ—Å–ª–µ /sleep)
	bot.callbackQuery(/^interpret:(.+)$/, async ctx => {
		await ctx.answerCallbackQuery({ text: '–î–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä...' })
		const userId = ctx.from?.id.toString()
		if (!userId) return
		const entryId = ctx.match![1]
		await runInterpretation(ctx, entryId, userId)
	})

	// –ó–∞–ø—É—Å–∫ —Ä–∞–∑–±–æ—Ä–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
	bot.callbackQuery(/^interpret:run:(.+)$/, async ctx => {
		await ctx.answerCallbackQuery({ text: '–î–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä...' })
		const userId = ctx.from?.id.toString()
		if (!userId) return
		const entryId = ctx.match![1]
		await runInterpretation(ctx, entryId, userId)
	})

	// Follow-up –ø–æ —Ä–∞–∑–±–æ—Ä—É
	bot.callbackQuery(/^followup:(.+)$/, async ctx => {
		await ctx.answerCallbackQuery()
		const entryId = ctx.match![1]
		const userId = ctx.from?.id?.toString()
		if (!userId) return

		const user = await getOrCreateUser(userId)
		const plan = (user.plan as any) ?? 'free'
		ctx.session.followupsUsed ??= 0
		const used = ctx.session.followupsUsed

		if (!isAdmin(ctx.from?.id)) {
			if (!canAskFollowup(plan, used)) {
				const total = getMonthlyFollowups(plan)
				const left = total === Infinity ? '‚àû' : Math.max(0, total - used)
				const kb = new InlineKeyboard().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')
				await ctx.reply(
					`–õ–∏–º–∏—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used}/${total}\n–û—Å—Ç–∞–ª–æ—Å—å: ${left}`,
					{ reply_markup: kb }
				)
				return
			}
		}

		ctx.session.conversation = { type: 'followup', entryId }
		await ctx.reply(
			'–ù–∞–ø–∏—à–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–∑–±–æ—Ä—É. –û—Ç–≤–µ—á—É –∫–æ—Ä–æ—Ç–∫–æ (2‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).'
		)
	})
}
