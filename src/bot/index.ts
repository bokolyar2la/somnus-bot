// src/bot/index.ts
import { Bot, GrammyError, HttpError, session } from 'grammy'

import {
	canAskFollowup,
	getMonthlyFollowups,
	getMonthlyQuota,
} from '../core/pricing.js'
import { startScheduler } from '../core/scheduler.js'
import { getOrCreateUser, updateUser } from '../db/repo.js'
import { isAdmin } from '../util/auth.js' // Import isAdmin
import { config } from '../util/config.js'
import { logger } from '../util/logger.js'

import { initSession, MyContext } from './helpers/state.js'
import { mainKb, registerCommands } from './keyboards.js'

import { InlineKeyboard } from 'grammy'
import { startHttpServer } from '../http/server.js'
import {
	handleAnalyticsCommand,
	registerAnalyticsFlow,
} from './flows/analyticsFlow.js'
import { registerExportFlow } from './flows/exportFlow.js'
import { answerFollowup } from './flows/followupFlow.js'
import { registerInterpretFlow } from './flows/interpretFlow.js'
import { registerListDreamsFlow } from './flows/listDreamsFlow.js'
import { registerPracticeFlow } from './flows/practiceFlow.js' // Import practice flow
import {
	handleProfileMessage,
	openProfile,
	registerProfileFlow,
} from './flows/profileFlow.js'
import {
	handleRemindersCommand,
	handleRemindersMessage,
	registerRemindersFlow,
} from './flows/remindersFlow.js'
import { handleReportCommand, registerReportFlow } from './flows/reportFlow.js'
import {
	handleSleepMessage,
	openSleepInput,
	registerSleepFlow,
} from './flows/sleepFlow.js' // Import openSleepInput
import {
	registerSubscriptionFlow,
	sendSubscribeMessage,
} from './flows/subscriptionFlow.js'

if (!config.BOT_TOKEN) {
	throw new Error('Empty BOT_TOKEN. Add it to .env and restart.')
}

const bot = new Bot<MyContext>(config.BOT_TOKEN)

// ---- session first
bot.use(
	session({
		initial: initSession,
	})
)

// ---- basic commands
bot.command('start', async (ctx: MyContext) => {
	if (!ctx.from?.id) {
		return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')
	}

	await getOrCreateUser(ctx.from.id.toString())

	const onboarding =
		'–ü—Ä–∏–≤–µ—Ç üëã –Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Å–Ω–æ–≤.\n' +
		'–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ –Ω–∏—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∏.\n\n' +
		'–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
		'‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω ‚Äî –¥–µ–ª–∏—Å—å –Ω–æ—á–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏.\n' +
		'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî –¥–Ω–µ–≤–Ω–∏–∫, —Å–∏–º–≤–æ–ª—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n' +
		'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–π —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–∏–Ω–∞–ª –æ —Å–Ω–∞—Ö.\n' +
		'üìã –û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã, —Ç–µ–º—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ.\n' +
		'üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤.\n' +
		'üìÇ –≠–∫—Å–ø–æ—Ä—Ç ‚Äî –≤—ã–≥—Ä—É–∂–∞–π —Å–Ω—ã –≤ PDF, TXT –∏–ª–∏ Markdown.\n\n' +
		'–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞–∂–∞—Ç—å ¬´‚úç –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω¬ª.'

	await ctx.reply(onboarding, { reply_markup: mainKb })
})

bot.command('help', (ctx: MyContext) =>
	ctx.reply(
		[
			'–°–ø—Ä–∞–≤–∫–∞:',
			'‚Ä¢ /sleep ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ—á–Ω–æ–π —Å–æ–Ω',
			'‚Ä¢ /analytics ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –¥–Ω–µ–≤–Ω–∏–∫',
			'‚Ä¢ /profile ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–∞–π–º–∑–æ–Ω–∞, —Ö—Ä–æ–Ω–æ—Ç–∏–ø, —Ü–µ–ª—å, —Å—Ç—Ä–µ—Å—Å –∏ —Ç.–¥.)',
			'‚Ä¢ /report ‚Äî –æ—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∞–∫—Ç–∏–∫–∏)',
			'‚Ä¢ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞',
			'‚Ä¢ /limits ‚Äî –ª–∏–º–∏—Ç—ã —Ä–∞–∑–±–æ—Ä–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ',
			'‚Ä¢ /subscribe ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ',
			'',
			'–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.',
		].join('\n')
	)
)

bot.command('limits', async (ctx: MyContext) => {
	const userId = ctx.from?.id?.toString()
	if (!userId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.')

	if (isAdmin(ctx.from?.id)) {
		return ctx.reply(
			`–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n–ü–ª–∞–Ω: admin\n–†–∞–∑–±–æ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü: ‚àû/‚àû\n–û—Å—Ç–∞–ª–æ—Å—å: ‚àû`
		)
	}

	const user = await getOrCreateUser(userId)
	const plan = (user.plan as any) ?? 'free'
	const used = user.monthlyCount ?? 0
	const total = getMonthlyQuota(plan)
	const left = Math.max(0, total - used)

	const kb = new InlineKeyboard().text('üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'pay:open')

	await ctx.reply(
		`–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n–ü–ª–∞–Ω: ${plan}\n–†–∞–∑–±–æ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü: ${used}/${total}\n–û—Å—Ç–∞–ª–æ—Å—å: ${left}`,
		{ reply_markup: kb }
	)
})

bot.command('pay', sendSubscribeMessage) // Register /pay command
bot.command('subscribe', sendSubscribeMessage)
bot.hears('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', sendSubscribeMessage)

bot.callbackQuery('pay:open', async (ctx: MyContext) => {
	await ctx.answerCallbackQuery()
	await sendSubscribeMessage(ctx)
})

// Dev command for admin (optional)
bot.command('dev_unlimit', async (ctx: MyContext) => {
	if (!isAdmin(ctx.from?.id)) return
	const id = ctx.from!.id.toString()
	await updateUser(id, { plan: 'paid' as any })
	await ctx.reply('Dev: –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–∞–Ω paid. –õ–∏–º–∏—Ç—ã —Å–Ω—è—Ç—ã.')
})

// –≠–∫—Å–ø–æ—Ä—Ç-–º–µ–Ω—é (–ø–æ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî –Ω–∞–≥–ª—è–¥–Ω–µ–µ)
const exportMenuKb = new InlineKeyboard()
	.text('üìÑ PDF', 'export:format:pdf')
	.row()
	.text('üìù Markdown', 'export:format:md')
	.row()
	.text('üìÉ TXT', 'export:format:txt')

// ---- reply keyboard buttons -> commands
bot.hears('üõå –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω', openSleepInput) // Use openSleepInput
bot.hears('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', handleAnalyticsCommand)
bot.command('analytics', handleAnalyticsCommand)
bot.hears('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', handleRemindersCommand)
bot.hears('üìã –û—Ç—á—ë—Ç –ø–æ —Å–Ω–∞–º', handleReportCommand)
bot.command('report', handleReportCommand)
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', openProfile)
bot.hears('üì§ –≠–∫—Å–ø–æ—Ä—Ç', (ctx: MyContext) =>
	ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:', { reply_markup: exportMenuKb })
)

bot.command('menu', (ctx: MyContext) =>
	ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainKb })
)

bot.callbackQuery('sleep:start', async (ctx: MyContext) => {
	await ctx.answerCallbackQuery()
	await openSleepInput(ctx as any)
})

// Removed - this callback is now handled in analyticsFlow.ts

bot.callbackQuery('profile:open', async (ctx: MyContext) => {
	await ctx.answerCallbackQuery().catch(() => {})
	await openProfile(ctx)
})

// –õ–æ–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
const subscriptionMenuKb = new InlineKeyboard()
	.text('1 –Ω–µ–¥–µ–ª—è ‚Äî 199 ‚ÇΩ', 'pay:week')
	.row()
	.text('1 –º–µ—Å—è—Ü ‚Äî 499 ‚ÇΩ', 'pay:month')
	.row()
	.text('1 –≥–æ–¥ ‚Äî 2500 ‚ÇΩ', 'pay:year')
	.row()
	.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'pay:back')

bot.callbackQuery('pay:back', async (ctx: MyContext) => {
	await ctx.answerCallbackQuery()
	try {
		// —Å–Ω–∏–º–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		await ctx.editMessageReplyMarkup()
	} catch {}
	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainKb })
})

// ---- register flows & system menu BEFORE start()
async function bootstrap() {
	await registerCommands(bot) // setMyCommands

	registerSleepFlow(bot)
	registerRemindersFlow(bot)
	registerAnalyticsFlow(bot)
	registerReportFlow(bot)
	registerProfileFlow(bot)
	registerExportFlow(bot)
	registerListDreamsFlow(bot)
	registerInterpretFlow(bot)
	registerSubscriptionFlow(bot)
	registerPracticeFlow(bot)

	// universal message router ‚Äî keep it AFTER flow registration
	bot.on('message', async (ctx: MyContext, next) => {
		const conv = ctx.session.conversation

		// no active conversation -> let other handlers run
		if (!conv) return next()

		if (conv.type === 'sleep' || conv.type === 'nap') {
			const handled = await handleSleepMessage(ctx)
			if (handled) return
			return next()
		}

		if (conv.type === 'reminders') {
			const handled = await handleRemindersMessage(ctx)
			if (handled) return
			return next()
		}

		if (conv.type === 'profile') {
			await handleProfileMessage(ctx)
			return
		}

		if (conv?.type === 'followup') {
			const entryId = conv.entryId
			if (!entryId) {
				await ctx.reply(
					'–ù–µ –Ω–∞—à—ë–ª —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–æ–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª –µ—â—ë —Ä–∞–∑.'
				)
				ctx.session.conversation = undefined
				return
			}

			const q = ctx.message?.text?.trim()
			if (!q || q.length < 2) {
				await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–∑–±–æ—Ä—É.')
				return
			}

			// –ª–∏–º–∏—Ç—ã
			const userId = ctx.from!.id.toString()
			const user = await getOrCreateUser(userId)
			const plan = (user.plan as any) ?? 'free'
			ctx.session.followupsUsed ??= 0
			const used = ctx.session.followupsUsed

			// Admin bypass for limits
			if (isAdmin(ctx.from?.id)) {
				// –∞–¥–º–∏–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã
			} else {
				if (!canAskFollowup(plan, used)) {
					const total = getMonthlyFollowups(plan)
					const left = total === Infinity ? '‚àû' : Math.max(0, total - used)
					const kb = new InlineKeyboard().text(
						'üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
						'pay:open'
					)
					await ctx.reply(
						`–õ–∏–º–∏—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used}/${total}\n–û—Å—Ç–∞–ª–æ—Å—å: ${left}`,
						{ reply_markup: kb }
					)
					// –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ followup, –ø—É—Å—Ç—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞
					return
				}
			}

			// –æ—Ç–≤–µ—Ç
			await ctx.reply('üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶')
			await answerFollowup(bot, ctx, entryId, q)

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
			ctx.session.conversation = undefined
			return
		}

		return next()
	})

	bot.catch((err: any) => {
		const ctx = err.ctx

		// –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–ø–¥–µ–π—Ç–∞ –ø–æ–ª–µ–∑–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ
		logger.error(
			{ err: err.error, update: ctx.update },
			'Error while handling update'
		)

		if (err.error instanceof GrammyError) {
			logger.error(
				{ method: err.error.method, description: err.error.description },
				'Error in Telegram API request'
			)
		} else if (err.error instanceof HttpError) {
			logger.error(
				{ httpError: String(err.error) },
				'Could not contact Telegram'
			)
		} else {
			logger.error({ unknown: err.error }, 'Unknown error')
		}
	})

	// start long polling, then scheduler
	await bot.start({
		onStart: ({ username }: { username?: string }) =>
			logger.info(`${username} started with long polling`),
	})
	startHttpServer()
	startScheduler(bot)
}

bootstrap().catch(e => {
	logger.error(e, 'Bootstrap failed')
	process.exit(1)
})
