// src/core/scheduler.ts
import type { Bot, Context } from 'grammy'
import { DateTime } from 'luxon'
import cron from 'node-cron'

import { getAllUsers, markReminderSent, ensureMonthlyReset } from '../db/repo.js'
import { isNowAt, nowInZone } from '../util/dates.js'
import { logger } from '../util/logger.js'

// –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π Bot —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Bot<MyContext>)
export function startScheduler<C extends Context>(bot: Bot<C>): void {
	// –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	cron.schedule('* * * * *', async () => {
		try {
			const users = await getAllUsers()

			for (const u of users) {
				await ensureMonthlyReset(u.id)
				const zone = u.timezone || 'UTC'
				const nowZ = nowInZone(zone) // –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

				// === –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
				const morningHHMM = u.remindMorning ?? u.wakeTime ?? null;
				if (u.remindersEnabled && morningHHMM) {
					const alreadyToday = u.lastMorningSent
						? nowZ.hasSame(
								DateTime.fromJSDate(u.lastMorningSent).setZone(zone),
								'day'
						  )
						: false

					if (!alreadyToday && isNowAt(zone, morningHHMM)) {
						await bot.api.sendMessage(
							Number(u.tgId),
							'‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–Ω, –ø–æ–∫–∞ –æ–Ω —Å–≤–µ–∂–∏–π: /sleep'
						)
						await markReminderSent(u.id, 'morning', new Date())
					}
				}

				// === –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
				const eveningHHMM = u.remindEvening ?? u.sleepTime ?? null;
				if (u.remindersEnabled && eveningHHMM) {
					const alreadyToday = u.lastEveningSent
						? nowZ.hasSame(
								DateTime.fromJSDate(u.lastEveningSent).setZone(zone),
								'day'
						  )
						: false

					if (!alreadyToday && isNowAt(zone, eveningHHMM)) {
						await bot.api.sendMessage(
							Number(u.tgId),
							'üåô –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É. –ü–µ—Ä–µ–¥ —Å–Ω–æ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: ¬´–•–æ—á—É –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–Ω¬ª. –£—Ç—Ä–æ–º ‚Äî /sleep.'
						)
						await markReminderSent(u.id, 'evening', new Date())
					}
				}

				// === –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===
				if (u.weeklyEnabled) {
					// –í –Ω–∞—à–µ–π –ë–î: 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ... 6 = —Å—É–±–±–æ—Ç–∞
					// –í Luxon: weekday = 1..7 (Mon..Sun)
					const targetLuxonWeekday =
						(u.weeklyDay ?? 0) === 0 ? 7 : (u.weeklyDay as number) // 0‚Üí7, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
					const hour = u.weeklyHour ?? 10

					const alreadyThisWeek = u.lastWeeklySent
						? nowZ.hasSame(
								DateTime.fromJSDate(u.lastWeeklySent).setZone(zone),
								'week'
						  )
						: false

					if (
						!alreadyThisWeek &&
						nowZ.weekday === targetLuxonWeekday &&
						nowZ.hour === hour &&
						nowZ.minute === 0
					) {
						// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º –ò–ò-—Å–≤–æ–¥–∫—É
						await bot.api.sendMessage(
							Number(u.tgId),
							'üß≠ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä: —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏ –º—è–≥–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏. (–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ.)'
						)
						await markReminderSent(u.id, 'weekly', new Date())
					}
				}
			}
		} catch (e) {
			logger.error({ e }, 'scheduler tick failed')
		}
	})
}

