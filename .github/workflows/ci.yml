name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run TypeScript compilation
      run: npx tsc --noEmit
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: "file:./test.db"
    
    - name: Check Prisma migrations
      run: npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Build application
      run: npm run build
    
    - name: Create deployment artifact
      run: |
        tar -czf deployment.tar.gz \
          dist/ \
          node_modules/ \
          prisma/ \
          package.json \
          package-lock.json
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ github.sha }}
        path: deployment.tar.gz
        retention-days: 30

  database-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check migration status
      run: npx prisma migrate status
      env:
        DATABASE_URL: "file:./check.db"
    
    - name: Validate schema
      run: npx prisma validate
    
    - name: Generate and check client
      run: npx prisma generate --check

  smoke-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Setup test database
      run: |
        npx prisma migrate deploy
      env:
        DATABASE_URL: "file:./smoke.db"
    
    - name: Run smoke tests
      run: npm run test:smoke
      env:
        NODE_ENV: test
        DATABASE_URL: "file:./smoke.db"
        BOT_TOKEN: "dummy_token_for_testing"
        OPENAI_API_KEY: "dummy_key_for_testing"
        OPENAI_MODEL: "gpt-3.5-turbo"
        ADMIN_IDS: "123456789"

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build, database-check, smoke-test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ CI/CD Pipeline completed successfully"
        echo "Build artifact: deployment-${{ github.sha }}"
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ CI/CD Pipeline failed"
        echo "Check the logs for details"
        exit 1
